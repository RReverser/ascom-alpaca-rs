[workspace.package]
edition = "2024"
authors = ["Ingvar Stepanyan <me@rreverser.com>"]
license = "MIT OR Apache-2.0"

[package]
name = "ascom-alpaca"
version = "1.0.0-beta.6"
categories = ["api-bindings", "science", "hardware-support"]
keywords = ["ascom", "alpaca", "astronomy", "astrophotography"]
description = "Rust implementation of the ASCOM Alpaca API for astronomy devices"
repository = "https://github.com/RReverser/ascom-alpaca-rs"
edition.workspace = true
authors.workspace = true
license.workspace = true
exclude = ["/.github", "/.vscode"]

[lints]
workspace = true

[workspace.dependencies]
ascom-alpaca = { path = "." }
async-trait = "0.1.89"
derive_more = "2.0.1"
eyre = "0.6.12"
futures = "0.3.31"
ndarray = "0.16.1"
net-literals = "0.2.0"
tokio = "1.47.1"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"

[dependencies]
async-fn-stream = { version = "0.2.2", optional = true }
async-trait = { workspace = true }
axum = { version = "0.8.4", optional = true }
bytemuck = { version = "1.23.2", features = [
	"derive",
	"extern_crate_std",
], optional = true }
bytes = { version = "1.10.1", optional = true }
criterion = { version = "0.7.0", optional = true }
derive_more = { workspace = true, features = ["debug", "deref", "deref_mut", "display"] }
dtor = { version = "0.1.0", optional = true }
netdev = { version = "0.37.1" }
eyre = { workspace = true }
futures = { workspace = true }
http = { version = "1.3.1", optional = true }
indexmap = { version = "2.10.0", features = ["serde"], optional = true }
macro_rules_attribute = "0.2.2"
mediatype = { version = "0.20.0", optional = true }
mime = { version = "0.3.17", optional = true }
ndarray = { workspace = true, optional = true }
net-literals = { workspace = true }
num_enum = "0.7.4"
rand = { version = "0.9.2", optional = true }
reqwest = { version = "0.12.23", optional = true, default-features = false, features = [
	"json",
] }
serde = { version = "1.0.219", features = ["derive", "rc"] }
serde-ndim = { version = "2.0.2", optional = true, features = ["ndarray"] }
serde_json = { version = "1.0.142" }
serde_plain = { version = "1.0.2", optional = true }
serde_repr = "0.1.20"
socket2 = "0.6.0"
thiserror = "2.0.14"
time = { version = "0.3.41", features = ["macros", "parsing"] }
tokio = { workspace = true, features = ["net", "rt", "io-util"] }
tracing = { workspace = true }
tracing-futures = { version = "0.2.5", features = [
	"futures-03",
], optional = true }
paste = "1.0.15"
serdebug = "1.2.0"
fnv = "1.0.7"
impl_serialize = "3.1.4"

[target.'cfg(windows)'.dependencies]
windows-sys = { version = "0.60.2", features = ["Win32_Networking_WinSock"] }

[dev-dependencies]
ctor = "0.5.0"
tracing-error = "0.2.1"
color-eyre = "0.6.5"
tracing-forest = { version = "0.2.0", features = ["ansi"] }
tracing-subscriber = { workspace = true }
tokio = { workspace = true, features = ["rt-multi-thread"] }

[[bench]]
name = "benches"
harness = false
required-features = ["client", "all-devices", "criterion"]

[features]
all-devices = [
	"camera",
	"cover_calibrator",
	"dome",
	"filter_wheel",
	"focuser",
	"observing_conditions",
	"rotator",
	"safety_monitor",
	"switch",
	"telescope",
]

test = ["tokio/process", "dep:dtor", "dep:reqwest"]
__test = ["client", "server", "test"]

__anydevice = []
camera = [
	"__anydevice",
	"dep:bytemuck",
	"dep:mediatype",
	"dep:ndarray",
	"dep:serde-ndim",
]
cover_calibrator = ["__anydevice"]
dome = ["__anydevice"]
filter_wheel = ["__anydevice"]
focuser = ["__anydevice"]
observing_conditions = ["__anydevice"]
rotator = ["__anydevice"]
safety_monitor = ["__anydevice"]
switch = ["__anydevice"]
telescope = ["__anydevice"]

__anynetwork = []
client = [
	"__anynetwork",
	"dep:async-fn-stream",
	"dep:tracing-futures",
	"dep:reqwest",
	"dep:bytes",
	"dep:mime",
	"dep:rand",
]
server = [
	"__anynetwork",
	"dep:bytemuck",
	"dep:axum",
	"dep:http",
	"dep:indexmap",
	"dep:serde_plain",
	"time/formatting",
]

[package.metadata.docs.rs]
all-features = true

[workspace]
members = ["examples/*"]

[workspace.lints.clippy]
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
as_conversions = "warn"
clone_on_ref_ptr = "warn"
default_numeric_fallback = "warn"
format_push_string = "warn"
if_then_some_else_none = "warn"
map_err_ignore = "warn"
panic_in_result_fn = "warn"
single_char_lifetime_names = "warn"
str_to_string = "warn"
string_to_string = "warn"
unwrap_used = "warn"
module_name_repetitions = "allow"
must_use_candidate = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
redundant_pub_crate = "allow"                # conflicts with unreachable_pub
significant_drop_tightening = "allow"        # too many false positives
single_match_else = "allow"
let_underscore_untyped = "allow"
cognitive_complexity = "allow"

[workspace.lints.rust]
elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
meta_variable_misuse = "warn"
missing_copy_implementations = "warn"
missing_debug_implementations = "warn"
missing_docs = "warn"
noop_method_call = "warn"
single_use_lifetimes = "warn"
unreachable_pub = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"
unused_results = "warn"
dead_code = "warn"

[workspace.lints.rustdoc]
# For cargo-rdme
redundant_explicit_links = "allow"
